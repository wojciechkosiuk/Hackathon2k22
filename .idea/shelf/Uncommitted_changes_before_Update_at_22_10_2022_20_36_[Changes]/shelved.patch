Index: pdf_reader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pdf_reader.py b/pdf_reader.py
--- a/pdf_reader.py	
+++ b/pdf_reader.py	
@@ -7,9 +7,7 @@
     # podajesz nazwe pliku i otrzymujesz string z calej zawartosci i NAZWE_SUBFUNDUSZU znaleziona w pliku
 
     pdf = pdfplumber.open(file_name)
-    
-    
-    
+
     full_text = ""
     for page in pdf.pages:
         full_text += page.extract_text()
@@ -20,43 +18,46 @@
 
 def get_list_of_currencies():
     # returns df of abbreviations and iso of currencies
-    currencies = pd.read_csv("List_of_circulating_currencies_1.csv",sep=',')[['Symbol or\nAbbrev.', 'ISO code']]
-    currencies.columns = ['abbr','iso']
-    currencies.drop_duplicates(subset = "abbr", inplace = True)
+    currencies = pd.read_csv("List_of_circulating_currencies_1.csv", sep=',')[['Symbol or\nAbbrev.', 'ISO code']]
+    currencies.columns = ['abbr', 'iso']
+    currencies.drop_duplicates(subset="abbr", inplace=True)
     return currencies
 
 
 def _56(full_text):
-    return float(re.findall(r'\W[0-9 ]{3,}[,.]{1}[\d]+\w',full_text)[0].replace(',','.'))
+    return float(re.findall(r'\W[0-9 ]{3,}[,.]{1}[\d]+\w', full_text)[0].replace(',', '.'))
 
+
 def _57(full_text):
     # returnuje walute kapitału (ostatni akapit)
     currencies = get_list_of_currencies()
     inf_prak = full_text.lower().split("informacje praktyczne")[1].split()
     indices = [i for i, x in enumerate(inf_prak) if x in currencies.abbr.values]
     for i in indices:
-        abbr = (inf_prak[i])    
+        abbr = (inf_prak[i])
     ISO = currencies[currencies['abbr'] == abbr].iso.values[0]
     return ISO
 
+
 def _59(full_text):
     # dostaje caly text zwraca _59 - SFIO/FIO/None
-    if len(re.findall("SFIO",full_text)) > 0:
+    if len(re.findall("SFIO", full_text)) > 0:
         return "SFIO"
-    elif len(re.findall("FIO",full_text)) > 0:
+    elif len(re.findall("FIO", full_text)) > 0:
         return "FIO"
     return None
 
+def _58(full_text):
 
 
 
 def main():
     # test
-    # file_name = "KIID_BNP_Paribas_DI_2022-09-21.pdf"
-    # text, subfundusz = extract(file_name) 
-    # print(_59(text))
-    pass
-    
+    file_name = "pkotfi/1cdbedd6-bcf8-4c16-828e-14a607e44c4f.pdf"
+    text = extract(file_name)
+    print(text)
+    print(_59(text))
+
 
 if __name__ == "__main__":
     main()
Index: tabele 2,3 + pdf extract.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tabele 2,3 + pdf extract.ipynb b/tabele 2,3 + pdf extract.ipynb
--- a/tabele 2,3 + pdf extract.ipynb	
+++ b/tabele 2,3 + pdf extract.ipynb	
@@ -115,6 +115,13 @@
     "    text = text.lower()\n",
     "    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n",
     "    text = re.sub('\\w*\\d\\w*', '', text)\n",
+    "    with open('stopwords.txt') as f:\n",
+    "        stopwords = []\n",
+    "        for line in f:\n",
+    "            print(line)\n",
+    "            stopwords.append(line)\n",
+    "        for stopword in stopwords:\n",
+    "            text = re.sub(stopword,'',text)\n",
     "    return text\n",
     "\n",
     "round1 = lambda x: clean_text_round1(x)\n"
Index: stopwords.txt
===================================================================
diff --git a/stopwords.txt b/stopwords.txt
new file mode 100644
--- /dev/null	
+++ b/stopwords.txt	
@@ -0,0 +1,329 @@
+a
+aby
+ach
+acz
+aczkolwiek
+aj
+albo
+ale
+ależ
+ani
+aż
+bardziej
+bardzo
+bez
+bo
+bowiem
+by
+byli
+bym
+bynajmniej
+być
+był
+była
+było
+były
+będzie
+będą
+cali
+cała
+cały
+chce
+choć
+ci
+ciebie
+cię
+co
+cokolwiek
+coraz
+coś
+czasami
+czasem
+czemu
+czy
+czyli
+często
+daleko
+dla
+dlaczego
+dlatego
+do
+dobrze
+dokąd
+dość
+dr
+dużo
+dwa
+dwaj
+dwie
+dwoje
+dzisiaj
+dziś
+gdy
+gdyby
+gdyż
+gdzie
+gdziekolwiek
+gdzieś
+go
+godz
+hab
+i
+ich
+ii
+iii
+ile
+im
+inna
+inne
+inny
+innych
+inż
+iv
+ix
+iż
+ja
+jak
+jakaś
+jakby
+jaki
+jakichś
+jakie
+jakiś
+jakiż
+jakkolwiek
+jako
+jakoś
+je
+jeden
+jedna
+jednak
+jednakże
+jedno
+jednym
+jedynie
+jego
+jej
+jemu
+jest
+jestem
+jeszcze
+jeśli
+jeżeli
+już
+ją
+każdy
+kiedy
+kierunku
+kilka
+kilku
+kimś
+kto
+ktokolwiek
+ktoś
+która
+które
+którego
+której
+który
+których
+którym
+którzy
+ku
+lat
+lecz
+lub
+ma
+mają
+mam
+mamy
+mało
+mgr
+mi
+miał
+mimo
+między
+mnie
+mną
+mogą
+moi
+moim
+moja
+moje
+może
+możliwe
+można
+mu
+musi
+my
+mój
+na
+nad
+nam
+nami
+nas
+nasi
+nasz
+nasza
+nasze
+naszego
+naszych
+natomiast
+natychmiast
+nawet
+nic
+nich
+nie
+niech
+niego
+niej
+niemu
+nigdy
+nim
+nimi
+nią
+niż
+no
+nowe
+np
+nr
+o
+o.o.
+obok
+od
+ok
+około
+on
+ona
+one
+oni
+ono
+oraz
+oto
+owszem
+pan
+pana
+pani
+pl
+po
+pod
+podczas
+pomimo
+ponad
+ponieważ
+powinien
+powinna
+powinni
+powinno
+poza
+prawie
+prof
+przecież
+przed
+przede
+przedtem
+przez
+przy
+raz
+razie
+roku
+również
+sam
+sama
+się
+skąd
+sobie
+sobą
+sposób
+swoje
+są
+ta
+tak
+taka
+taki
+takich
+takie
+także
+tam
+te
+tego
+tej
+tel
+temu
+ten
+teraz
+też
+to
+tobie
+tobą
+toteż
+totobą
+trzeba
+tu
+tutaj
+twoi
+twoim
+twoja
+twoje
+twym
+twój
+ty
+tych
+tylko
+tym
+tys
+tzw
+tę
+u
+ul
+vi
+vii
+viii
+vol
+w
+wam
+wami
+was
+wasi
+wasz
+wasza
+wasze
+we
+według
+wie
+wiele
+wielu
+więc
+więcej
+wszyscy
+wszystkich
+wszystkie
+wszystkim
+wszystko
+wtedy
+www
+wy
+właśnie
+wśród
+xi
+xii
+xiii
+xiv
+xv
+z
+za
+zapewne
+zawsze
+zaś
+ze
+zeznowu
+znowu
+znów
+został
+zł
+żaden
+żadna
+żadne
+żadnych
+że
+żeby
\ No newline at end of file
Index: nlp_data_preprocessing.py
===================================================================
diff --git a/nlp_data_preprocessing.py b/nlp_data_preprocessing.py
new file mode 100644
--- /dev/null	
+++ b/nlp_data_preprocessing.py	
@@ -0,0 +1,62 @@
+import re
+import string
+import pandas as pd
+from pdf_reader import extract
+from sklearn.feature_extraction.text import TfidfVectorizer
+def clean_text_round1(text):
+    '''Make text lowercase, remove punctuation and remove words containing numbers and stopwords.'''
+    text = text.lower()
+    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
+    text = re.sub('\w*\d\w*', '', text)
+    with open('stopwords.txt') as f:
+        stopwords = []
+        for line in f:
+            print(line)
+            stopwords.append(line)
+        for stopword in stopwords:
+            text = re.sub(stopword, '', text)
+    return text
+
+def transform_row(filename):
+    text = extract(filename)
+    text = clean_text_round1(text)
+    return text
+
+
+def cluster_text(text):
+    vectorizer = TfidfVectorizer()
+    X = vectorizer.fit_transform(text)
+
+    import matplotlib.pyplot as plt
+    from sklearn.cluster import KMeans
+    Sum_of_squared_distances = []
+    K = range(2, 10)
+    for k in K:
+        km = KMeans(n_clusters=k, max_iter=200, n_init=10)
+        km = km.fit(X)
+        Sum_of_squared_distances.append(km.inertia_)
+    plt.plot(K, Sum_of_squared_distances, 'bx-')
+    plt.xlabel('k')
+    plt.ylabel('Sum_of_squared_distances')
+    plt.title('Elbow Method For Optimal k')
+    plt.show()
+
+    print('How many clusters do you want to use?')
+    true_k = int(input())
+    model = KMeans(n_clusters=true_k, init='k-means++', max_iter=200, n_init=10)
+    model.fit(X)
+
+    labels = model.labels_
+    clusters = pd.DataFrame(list(zip(text, labels)), columns=['title', 'cluster'])
+    # print(clusters.sort_values(by=['cluster']))
+
+    for i in range(true_k):
+        print(clusters[clusters['cluster'] == i])
+
+    return
+if __name__ == "__main__":
+    df = pd.read_csv('misie_KIID_META.csv')
+    df['clean_text'] = df.apply(lambda row: transform_row(row['NAZWA_PLIKU']), axis=1)
+
+    round1 = lambda x: clean_text_round1(x)
+
Index: check_if_kiid.py
===================================================================
diff --git a/check_if_kiid.py b/check_if_kiid.py
--- a/check_if_kiid.py	
+++ b/check_if_kiid.py	
@@ -1,14 +1,15 @@
 import pdfplumber
 
+
 def check_kiid(file_name):
     # podajesz nazwe pliku i zwraca TRUE gdy tekst zaczyna sie od "kluczowe informacje dla inwestorow"
 
-    
     pdf = pdfplumber.open(file_name)
     text = pdf.pages[0].extract_text().lower()[1:200]
     return "kluczowe informacje dla inwestorów" in text
 
+
 if __name__ == "__main__":
-    #test
-    file_name = "be4dbbf2-4e25-4053-87ba-52f13e939a48.pdf" 
+    # test
+    file_name = "be4dbbf2-4e25-4053-87ba-52f13e939a48.pdf"
     print(check_kiid(file_name))
